function createLandscape(e) {
    // Initialize variables for scene, renderer, camera, and mesh
    var t, n, a, i,
        r = document.querySelector(".landscape"),
        o = window.innerWidth,
        s = window.innerHeight,
        // Object to track mouse/touch movement
        l = {x: 0, y: 0, xDamped: 0, yDamped: 0},
        // Check if device has touch capability
        u = void 0 !== window.orientation;

    // Function to create sky and sun in the scene
    function m() {
        (m = new THREE.Sky).scale.setScalar(45e4);
        // Set sky properties
        m.material.uniforms.turbidity.value = 13;
        m.material.uniforms.rayleigh.value = 1.2;
        m.material.uniforms.luminance.value = 1;
        m.material.uniforms.mieCoefficient.value = .1;
        m.material.uniforms.mieDirectionalG.value = .58;
        t.add(m);

        // Create invisible sun sphere
        sunSphere = new THREE.Mesh(
            new THREE.SphereBufferGeometry(2e4, 16, 8),
            new THREE.MeshBasicMaterial({color: 16777215})
        );
        sunSphere.visible = false;
        t.add(sunSphere);

        // Position the sun
        var e = -.002 * Math.PI,
            n = 2 * Math.PI * -.25;
        sunSphere.position.x = 4e5 * Math.cos(n);
        sunSphere.position.y = 4e5 * Math.sin(n) * Math.sin(e);
        sunSphere.position.z = 4e5 * Math.sin(n) * Math.cos(e);
        m.material.uniforms.sunPosition.value.copy(sunSphere.position);
    }

    // Handle window resize
    function d() {
        o = window.innerWidth;
        s = window.innerHeight;
        a.aspect = o / s;
        a.updateProjectionMatrix();
        n.setSize(o, s);
    }

    // Handle mouse/touch movement
    function c(e) {
        var t, n;
        e.preventDefault();
        if ("mousemove" == e.type) {
            t = e.clientX;
            n = e.clientY;
        } else {
            t = e.changedTouches[0].clientX;
            n = e.changedTouches[0].clientY;
        }
        l.x = t;
        l.y = n;
    }

    // Animation loop
    function p() {
        requestAnimationFrame(p);
        // Smooth movement using damping
        l.xDamped = v(l.xDamped, l.x, .1);
        l.yDamped = v(l.yDamped, l.y, .1);

        var e = .001 * performance.now();
        // Update shader uniforms
        i.material.uniforms.time.value = e;
        i.material.uniforms.scroll.value = e + f(l.yDamped, 0, s, 0, 4);
        i.material.uniforms.distortCenter.value = .1 * Math.sin(e);
        i.material.uniforms.roadWidth.value = f(l.xDamped, 0, o, 1, 4.5);
        a.position.y = f(l.yDamped, 0, s, 4, 11);
        n.render(t, a);
    }

    // Linear interpolation helper
    function f(e, t, n, a, i) {
        return a + (e - t) / (n - t) * (i - a);
    }

    // Damping function for smooth movement
    function v(e, t, n) {
        return (1 - n) * e + n * t;
    }

    // Initialize scene and start animation
    !function() {
        // Setup THREE.js scene, camera, and renderer
        (function() {
            t = new THREE.Scene;
            var e = new THREE.Color(3355443);
            t.background = e;
            t.fog = new THREE.Fog(e, 0, 400);
            m();
            // Setup camera
            (a = new THREE.PerspectiveCamera(60, o / s, .1, 1e4)).position.y = 8;
            a.position.z = 4;
            // Add ambient light
            ambientLight = new THREE.AmbientLight(16777215, 1);
            t.add(ambientLight);
            // Setup renderer
            (n = new THREE.WebGLRenderer({
                canvas: r,
                antialias: true
            })).setPixelRatio = devicePixelRatio;
            n.setSize(o, s);
        })();

        // Create landscape geometry and material
        l = new THREE.PlaneBufferGeometry(100, 400, 400, 400);
        // Setup shader uniforms
        f = {
            time: {type: "f", value: 0},
            scroll: {type: "f", value: 0},
            distortCenter: {type: "f", value: .1},
            roadWidth: {type: "f", value: .5},
            pallete: {type: "t", value: null},
            speed: {type: "f", value: 3},
            maxHeight: {type: "f", value: 10},
            color: new THREE.Color(1, 1, 1)
        };

        // Create shader material
        v = new THREE.ShaderMaterial({
            uniforms: THREE.UniformsUtils.merge([THREE.ShaderLib.basic.uniforms, f]),
            vertexShader: document.getElementById("custom-vertex").textContent,
            fragmentShader: document.getElementById("custom-fragment").textContent,
            wireframe: false,
            fog: true
        });

        // Create and position landscape mesh
        (i = new THREE.Mesh(l, v)).position.z = -180;
        i.rotation.x = -Math.PI / 2;
        t.add(i);

        // Load palette texture
        new THREE.TextureLoader().load(e.palleteImage, function(e) {
            i.material.uniforms.pallete.value = e;
            i.material.needsUpdate = true;
        });

        // Start animation loop
        p();

        // Add event listeners
        u ? window.addEventListener("touchmove", c, {passive: false})
          : window.addEventListener("mousemove", c);
        window.addEventListener("resize", d);
        d();
    }();
}

// Initialize landscape with palette image
createLandscape({palleteImage: pallete});